Bootstrap: docker
From: ubuntu:23.04


%files
    convert-format/read.py /software/read.py
    create-outside-surface/* /source/create-outside-surface/
    postprocess-mesh/* /source/postprocess-mesh/


%post
    # basic settions
    export DEBIAN_FRONTEND=noninteractive
    apt-get update -y

    # install basic tools
    apt-get install -y wget unzip curl build-essential

    # install rust
    curl https://sh.rustup.rs -sSf | sh -s -- -y
    . $HOME/.cargo/env

    # install simnibs
    mkdir /deleteme && cd /deleteme
    wget https://github.com/simnibs/simnibs/releases/download/v4.0.1/simnibs_installer_linux.tar.gz
    tar xf simnibs_installer_linux.tar.gz
    cd simnibs_installer
    ./install -s -t /software/simnibs
    rm -rf /deleteme

    # build the rust components
    cd /source/create-outside-surface
    cargo build --release
    cp target/release/ray /software/ray
    chmod a+x /software/ray
    cd /source/postprocess-mesh
    cargo build --release
    cp target/release/cleanup /software/cleanup
    chmod a+x /software/cleanup

    # make /software readable by all
    chmod -R a+r /software

    # cleanup
    rm -rf /root/.cargo
    rm -rf /source


%runscript
    export PATH=/software/simnibs/bin:$PATH
    export PATH=/software:$PATH

    if [ $# -ne 2 ]; then
        echo "This script expects two arguments. Usage: $0 INPUT_FILE OUTPUT_PATH"
        exit 1
    fi

    input_file=$1
    output_path=$2

    # check the file pattern and exit if it does not match
    case "${input_file}" in
        *.nii.gz)
            echo "Input file: ${input_file}"
            input_file_prefix=$(basename $input_file .nii.gz)
            ;;
        *.nii)
            echo "Input file: ${input_file}"
            input_file_prefix=$(basename $input_file .nii)
            ;;
        *)
            echo "Error: File does not have a .nii or .nii.gz extension."
            exit 1
            ;;
    esac

    # this produces a msh file
    charm --forcerun --forceqform ${input_file_prefix} ${input_file}

    # extract surfaces
    simnibs_python /software/read.py --input-mesh="m2m_${input_file_prefix}/${input_file_prefix}.msh" --output-path="${output_path}"

    # create outside surface and remove all.txt
    ray --input-file ${output_path}/all.txt --output-file ${output_path}/outside-only-temporary.txt
    rm -f ${output_path}/all.txt

    # post-process the outside surface
    cleanup --input-file ${output_path}/outside-only-temporary.txt --output-file ${output_path}/outside-only.txt
    rm -f ${output_path}/outside-only-temporary.txt

%help
    example:
    $ ./extract-surfaces.sif T1_ernie.nii.gz ernie_data
